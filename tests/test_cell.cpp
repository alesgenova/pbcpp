#include <iostream>
#include <Eigen/Core>
#include <cmath>

#include "catch.hpp"
#include "utils/Utils.hpp"
#include "cell/DirectCell.hpp"
#include "cell/ReciprocalCell.hpp"
#include "constants/Constants.hpp"

#include "utils.hpp"


TEST_CASE( "Basic DirectCell Tests" ) {
  const int n = 100;
  double a, b, c;
  DirectCell cell0;
  //a = 2; b = 3; c = 4;
  //std::cout << a << "  " << b << "  " << c  <<std::endl;
  for (int i = 0; i < n; i++){
    a = randomBetween(0.1, 100.); b = randomBetween(0.1, 100.); c = randomBetween(0.1, 100.);
    cell0 = getOrthoDirectCell(a, b, c);
    REQUIRE( almostEqual(cell0.getVolume(), a*b*c ) );
    REQUIRE( cell0 == cell0 );
  }
}

TEST_CASE( "Basic ReciprocalCell Tests" ) {
  const int n = 100;
  double a, b, c;
  ReciprocalCell cell0;
  for (int i = 0; i < n; i++){
    a = randomBetween(0.1, 100.); b = randomBetween(0.1, 100.); c = randomBetween(0.1, 100.);
    cell0 = getOrthoReciprocalCell(a, b, c);
    REQUIRE( almostEqual(cell0.getVolume(), (TWOPI*TWOPI*TWOPI)/(a*b*c) ) );
    REQUIRE( cell0 == cell0 );
  }
}

TEST_CASE( "DirectCell ReciprocalCell conversion Tests" ) {
  const int n = 100;
  double a, b, c;
  DirectCell cell0, cell1;
  ReciprocalCell reciprocal0, reciprocal1;

  for (int i = 0; i < n; i++){
    a = randomBetween(0.1, 100.); b = randomBetween(0.1, 100.); c = randomBetween(0.1, 100.);
    // cells generated 
    cell0 = getOrthoDirectCell(a, b, c);
    reciprocal0 = getOrthoReciprocalCell(a, b, c);
    // cells generated by conversion
    reciprocal1 = cell0.getReciprocal();
    cell1 = reciprocal1.getDirect();
    REQUIRE( almostEqual(cell0.getVolume(), a*b*c ) );
    REQUIRE( almostEqual(cell1.getVolume(), a*b*c ) );
    REQUIRE( cell0 == cell1 );
    REQUIRE( !(cell0 != cell1) );
    REQUIRE( almostEqual(reciprocal1.getVolume(), (TWOPI*TWOPI*TWOPI)/(a*b*c) ) );
    REQUIRE( reciprocal0 == reciprocal1 );
    REQUIRE( !(reciprocal0 != reciprocal1) );
  }
}
